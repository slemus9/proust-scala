Bool_c : Type;
Bool_c = (X : Type) -> X -> X -> X;

true_c : Bool_c;
true_c = \_ x _ -> x;

false_c : Bool_c;
false_c = \_ _ y -> y;

if_c : (X : Type) -> Bool_c -> X -> X -> X;
if_c = \X b -> b X;

and_c : Bool_c -> Bool_c -> Bool_c;
and_c = \b1 b2 -> if_c Bool_c b1 true_c b2;

Pair_c : Type -> Type -> Type;
Pair_c = \A B -> (C : Type) -> (A -> B -> C) -> C;

pair_c : (A, B : Type) -> A -> B -> Pair_c A B;
pair_c = \_ _ a b _ elim -> elim a b;

first_c : (A, B : Type) -> (Pair_c A B) -> A;
first_c = \A _ p -> p A (\a _ -> a);

snd_c : (A, B : Type) -> (Pair_c A B) -> B;
snd_c = \_ B p -> p B (\_ b -> b);

pair_c-commutes : (A, B : Type) -> (Pair_c A B) -> (Pair_c B A);
pair_c-commutes = \A B p -> pair_c B A (snd_c A B p) (first_c A B p);

Nat_c : Type;
Nat_c = (A : Type) -> (A -> A) -> A -> A;

zero_c : Nat_c;
zero_c = \_ _ a -> a;

suc_c : Nat_c -> Nat_c;
suc_c = \n A f a -> f (n A f a);

one_c : Nat_c;
one_c = suc_c zero_c;

two_c : Nat_c;
two_c = suc_c one_c;

plus_c : Nat_c -> Nat_c -> Nat_c;
plus_c = \m n A f a -> m A f (n A f a);
