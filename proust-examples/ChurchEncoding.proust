Bool : Type;
Bool = (X : Type) -> X -> X -> X;

true : Bool;
true = \_ x _ -> x;

false : Bool;
false = \_ _ y -> y;

if : (X : Type) -> Bool -> X -> X -> X;
if = \X b -> b X;

and : Bool -> Bool -> Bool;
and = \b1 b2 -> if Bool b1 true b2;

Pair : Type -> Type -> Type;
Pair = \A B -> (C : Type) -> (A -> B -> C) -> C;

pair : (A, B : Type) -> A -> B -> Pair A B;
pair = \_ _ a b _ elim -> elim a b;

first : (A, B : Type) -> (Pair A B) -> A;
first = \A _ p -> p A (\a _ -> a);

snd : (A, B : Type) -> (Pair A B) -> B;
snd = \_ B p -> p B (\_ b -> b);

pairCommutes : (A, B : Type) -> (Pair A B) -> (Pair B A);
pairCommutes = \A B p -> pair B A (snd A B p) (first A B p);

Nat : Type;
Nat = (A : Type) -> (A -> A) -> A -> A;

zero : Nat;
zero = \_ _ a -> a;

suc : Nat -> Nat;
suc = \n A f a -> f (n A f a);

one : Nat;
one = suc zero;

two : Nat;
two = suc one;

plus : Nat -> Nat -> Nat;
plus = \m n A f a -> m A f (n A f a);
