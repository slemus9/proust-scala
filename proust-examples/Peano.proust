eqSym : (A : Type) -> (x, y : A) -> (x == y) -> (y == x);
eqSym = \_ x y eq -> eqElim x y (\z -> z == x) (eqRefl x) eq;

eqTrans : (A : Type) -> (x, y, z : A) -> (x == y) -> (y == z) -> (x == z);
eqTrans = \A x y z eq1 eq2 -> eqElim y x (\w -> w == z) eq2 (eqSym A x y eq1);

eqAp : (A, B : Type) -> (x, y : A) -> (f : A -> B) -> (x == y) -> (f x) == (f y);
eqAp = \A B x y f eq -> eqElim x y (\w -> (f x) == (f w)) (eqRefl (f x)) eq;

plus : Nat -> Nat -> Nat;
plus = \n m -> natElim n (\_ -> Nat) m (\_ m -> suc m);

one : Nat;
one = suc zero;

two : Nat;
two = suc one;

three : Nat;
three = suc two;

one-plus-two : (plus one two) == three;
one-plus-two = eqRefl three;

left-identity : (n : Nat) -> (plus zero n) == n;
left-identity = \n -> eqRefl n;

plus-suc : (n, m : Nat) -> (plus (suc n) m) == (suc (plus n m));
plus-suc = \n m -> eqRefl (suc (plus n m));

right-identity : (n : Nat) -> (plus n zero) == n;
right-identity = \n ->
  natElim
    n
    (\n -> (plus n zero) == n)
    (eqRefl zero)
    (\k ih -> eqAp Nat Nat (plus k zero) k (\n -> suc n) ih);
