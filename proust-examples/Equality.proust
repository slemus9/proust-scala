eqSym : (A : Type) -> (x, y : A) -> (x == y) -> (y == x);
eqSym = \_ x y eq -> eqElim x y (\z -> z == x) (eqRefl x) eq;

eqTrans : (A : Type) -> (x, y, z : A) -> (x == y) -> (y == z) -> (x == z);
eqTrans = \A x y z eq1 eq2 -> eqElim y x (\w -> w == z) eq2 (eqSym A x y eq1);

Bool : Type;
Bool = (X : Type) -> X -> X -> X;

true : Bool;
true = \_ x _ -> x;

false : Bool;
false = \_ _ y -> y;

if : (X : Type) -> Bool -> X -> X -> X;
if = \X b -> b X;

and : Bool -> Bool -> Bool;
and = \b1 b2 -> if Bool b1 true b2;

andTrue : (and true true) == true;
andTrue = eqRefl true
